import net.fabricmc.loom.task.MigrateMappingsTask

plugins {
    id 'java'
    id("fabric-loom") version "0.2.7-SNAPSHOT"
    id("io.github.fukkitmc.crusty") version "1.1.1"
    id "de.undercouch.download" version "4.0.2"
}

group 'org.example'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven {
        name = "fabric"
        url = "https://maven.fabricmc.net/"
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    minecraft("net.minecraft:minecraft:1.15.1")
    mappings(fukkit.mappings("1.15.1"))
    modCompile("net.fabricmc:fabric-loader:0.7.4+build.177")
}


task('downloadARR', type: Download) {
    src 'https://hub.spigotmc.org/jenkins/job/BuildTools/lastSuccessfulBuild/artifact/target/BuildTools.jar'
    dest new File(buildDir, "buildtools/BuildTools.jar")
}

task('runARR', type: JavaExec) {
    println("running build tools")
    main = "-jar"
    args = ["BuildTools.jar"]
    workingDir = new File(buildDir, "buildtools")
}

task('decrustVanilla', type: MigrateMappingsTask) {
    println("migrating unpatched craftbukkit...")
    mappings = "1.15.1+build.36"
    outputDir = "$buildDir/src/vanilla/java"
    new File("$buildDir/buildtools/work/").listFiles().each {
        if (it.isDirectory() && it.getName().startsWith("decompile-")) {
            println("decomp found!")
            new File(it, "classes").deleteDir() // bye
            inputDir = it
        }
    }
}

task('decrustCraftBukkit', type: MigrateMappingsTask) {
    println("migrating patched craftbukkit...")
    inputDir "$buildDir/buildtools/CraftBukkit/src/main/java"
    outputDir "$buildDir/src/craftbukkit/java"
    mappings = "1.15.1+build.36"
}

task('createPatches') {
    println("creating patch file...")
    try {
        exec {
            workingDir = "$projectDir\\diff"
            commandLine "$projectDir\\diff\\diff.exe", "-rbBhdu", "$buildDir\\src\\vanilla\\java", "$buildDir\\src\\craftbukkit\\java"
            standardOutput new FileOutputStream(new File("$buildDir\\output.patch"))
            errorOutput System.out
        }
    } catch(Exception e) {
        e.printStackTrace(System.out)
    }
}

task('parsePatches') {
    File folder = new File('patches')
    folder.mkdirs()
    BufferedReader reader = new BufferedReader(new FileReader("$buildDir/output.patch"))
    Queue<String> stack = new LinkedList<>()
    reader.lines().each {
        stack.add(it)
    }

    List<String> unique = new ArrayList<>()
    while (!stack.isEmpty()) {
        String diffLine = stack.poll()
        if (diffLine.startsWith("diff")) {
            String[] paths = diffLine.split("\\\\")
            String className = paths[paths.length - 1]
            File clas = new File(folder, className.replace(".java", ".patch"))
            BufferedWriter writer = new BufferedWriter(new FileWriter(clas))

            while (!stack.isEmpty() && !stack.peek().startsWith("diff")) {
                String peek = stack.poll()
                if (peek.startsWith("Only in")) {
                    unique.add(peek)
                    continue
                }
                writer.write(peek)
                writer.write('\n')
            }
            writer.close()
        }
    }

    File uniques = new File(folder, "uniques.txt")
    PrintStream stream = new PrintStream(new FileOutputStream(uniques))
    unique.each {
        stream.println(it)
    }
    stream.close()
}

tasks.runARR.dependsOn('downloadARR')
tasks.decrustVanilla.dependsOn('runARR')
tasks.decrustCraftBukkit.dependsOn('runARR')
tasks.createPatches.dependsOn('decrustVanilla', 'decrustCraftBukkit')
tasks.parsePatches.dependsOn('createPatches')